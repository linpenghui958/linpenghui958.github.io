(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{411:function(t,e,n){"use strict";n.r(e);var s=n(45),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"基于vue-cli实现自动生成skeleton-page-多页skeleton"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于vue-cli实现自动生成skeleton-page-多页skeleton"}},[t._v("#")]),t._v(" ###基于vue-cli实现自动生成Skeleton Page，多页skeleton")]),t._v(" "),n("p",[t._v("11月15号更新：\n简单粗暴，先上 最新demo地址（有帮助的同学可以点个赞，或者给个star "),n("em",[t._v("(:з」∠)")]),t._v(" ）\n"),n("a",{attrs:{href:"https://github.com/linpenghui958/skeleton-test",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-skeleton demo"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("文章发布过去半年时间，文章中所提的两个插件都已经进行较大的更新，有朋友跟我咨询后续插件的支持情况。这里我再以page-skeleton-webpack-plugin(0.10.12)以下简称PSWP为例进行实验\n可以看到PSWP"),n("a",{attrs:{href:"https://github.com/ElemeFE/page-skeleton-webpack-plugin/blob/master/docs/i18n/zh_cn.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),n("OutboundLink")],1),t._v("中已经更新了对多页自动生成，和多路由骨架屏的支持。\n下文还是以vue-cli为例\n第一步，新建一个项目，并安装相关依赖")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\tvue init webpack skeleton-test\n\tcd skeleton-test\n\tnpm install\n\tnpm install --save-dev page-skeleton-webpack-plugin\n\tnpm install --save-dev html-webpack-plugin\n")])])]),n("p",[t._v("第二步，然后在build/webpack.base.conf.js中")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HtmlWebpackPlugin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'html-webpack-plugin'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" SkeletonPlugin "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'page-skeleton-webpack-plugin'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" webpackConfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  entry"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    path"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" __dirname "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/dist'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    filename"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index.bundle.js'")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  plugin"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HtmlWebpackPlugin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 本身的配置项")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SkeletonPlugin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      pathname"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../shell'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// customPath为来存储 shell 文件的地址")]),t._v("\n      staticDir"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../dist'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最好和 `output.path` 相同")]),t._v("\n      routes"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/test'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将需要生成骨架屏的路由添加到数组中，测试根路径和/test路径")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("第三步，运行项目，生产skeleton-page")]),t._v(" "),n("ul",[n("li",[t._v("还是在控制台输入toggleBar后点击页面上方的control bar唤醒\n"),n("img",{attrs:{src:"http://pi82b6lei.bkt.clouddn.com/111.png",alt:""}}),t._v("\n右上角依次为，预览不同路由生产的骨架屏，手机预览，写入本地文件\n可以看到现在更新了许多功能，在预览无误后\n点击右上方写入本地文件即可进行最后的打包预览\n"),n("img",{attrs:{src:"http://pi82b6lei.bkt.clouddn.com/222.png",alt:""}}),t._v("\n可以看到项目目录多了一个shell路径，这跟之前设置的保存路径一致")])]),t._v(" "),n("p",[t._v("第四步，打包预览效果")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("\tnpm run build\n\tcd dist\n\thttp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("server\n")])])]),n("p",[n("img",{attrs:{src:"http://pi82b6lei.bkt.clouddn.com/skeleton11-15-3.png",alt:""}}),t._v("\n然后进入浏览器预览\n看一下根路径\n"),n("img",{attrs:{src:"http://pi82b6lei.bkt.clouddn.com/screen12.gif",alt:""}}),t._v("\n看一下/test路径\n"),n("img",{attrs:{src:"http://pi82b6lei.bkt.clouddn.com/skeleton-screen13.gif",alt:""}})]),t._v(" "),n("p",[t._v("ps！！！前方高能预警\n这里是以vue-cli为基础进行的测试\n在初始化的模板中，webpack分为base、dev、 prod三个文件\n这里因为PSWP为dev和prod都需要的插件，所以放在base文件中\n但是在第一次打包后预览，笔者发现prod环境并没有生效\n原因是在webpack.prod.conf.js中的HtmlWebpackPlugin配置中")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("plugins"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HtmlWebpackPlugin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t  filename"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("build"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t  template"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index.html'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t  inject"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t  minify"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// removeComments: true,  移除注释")]),t._v("\n\t    collapseWhitespace"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t    removeAttributeQuotes"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\t    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// more options:")]),t._v("\n\t    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://github.com/kangax/html-minifier#options-quick-reference")]),t._v("\n\t  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// necessary to consistently work with multiple chunks via CommonsChunkPlugin")]),t._v("\n\t  chunksSortMode"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dependency'")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[t._v("这里有一项minify的配置为移除注释，查看minify的"),n("a",{attrs:{href:"https://github.com/kangax/html-minifier#options-quick-reference",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),n("OutboundLink")],1),t._v(" "),n("img",{attrs:{src:"http://pi82b6lei.bkt.clouddn.com/skeleton11-15-4.png",alt:""}}),t._v("\n笔者觉得很有可能是这个配置，移除了index.html中的"),t._v("给移除了，导致打包后未能生效。\n在注释掉这一选项后，dev和prod环境均正常")]),t._v(" "),n("h2",{attrs:{id:"以下为原内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#以下为原内容"}},[t._v("#")]),t._v(" 以下为原内容")]),t._v(" "),n("p",[t._v("之前看eleme的专栏了解到骨架页面\n这里刚好项目重构尝试将Skeleton Page引入项目中\n其中遇到一些问题和一些坑，分享一下")]),t._v(" "),n("p",[t._v("首先用到的是"),n("a",{attrs:{href:"https://github.com/ElemeFE/page-skeleton-webpack-plugin",title:"page-skeleton-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("page-skeleton-webpack-plugin"),n("OutboundLink")],1),t._v("\neleme开源的一款自动生成skeleton-page的插件\n使用起来也是非常的简单粗暴\n"),n("br"),t._v("\n项目是基于vue-cli + ts")]),t._v(" "),n("h4",{attrs:{id:"page-skeleton-webpack-plugin使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#page-skeleton-webpack-plugin使用"}},[t._v("#")]),t._v(" page-skeleton-webpack-plugin使用")]),t._v(" "),n("p",[t._v("首先通过npm安装插件，该插件依赖于"),n("a",{attrs:{href:"https://github.com/jantimon/html-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("html-webpack-plugin"),n("OutboundLink")],1)]),t._v(" "),n("blockquote",[n("p",[t._v("npm install --save-dev page-skeleton-webpack-plugin\nnpm install --save-dev html-webpack-plugin")])]),t._v(" "),n("ul",[n("li",[t._v("配置篇\n首先，因为dev和prod环境都需要用到这个插件，可以直接在webpack.base.conf.js中的config中添加对应的plugins")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("第一步")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v(" // 引入插件\n const { SkeletonPlugin } = require('page-skeleton-webpack-plugin')\n \n //...其他配置\n module.exports = {\n   context: path.resolve(__dirname, '../'),\n   entry: {\n     app: './src/main.ts'\n   },\n   output: { //...\n   },\n   resolve: { //...\n   },\n   module: { //...\n   },\n   node: { // ...\n   },\n   plugins: [\n     new SkeletonPlugin({\n       pathname: path.resolve(__dirname, '../static'), // 生成名为 shell 文件存放地址\n       headless: false // 打开非headless chrome\n     })\n   ]\n }\n")])])])]),t._v(" "),n("li",[n("p",[t._v("第二步\n在index.html里面添加skeleton-page要注入的地方")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v(' <!DOCTYPE html>\n <html lang="en">\n <head>\n   <meta charset="UTF-8">\n   <title>Document</title>\n </head>\n <body>\n   <div id="app">\n     \x3c!-- shell --\x3e   // 在#app里添加\n   </div>\n </body>\n </html>\n')])])])])]),t._v(" "),n("p",[t._v("配置就这样完成了，是不是很简单粗暴，使用起来也是很简单")]),t._v(" "),n("ul",[n("li",[t._v("使用篇\n在chrome中运行项目后\n1.使用Ctrl|Cmd + enter 呼出插件交互界面后者在控制台输入toggelBar呼出交互界面\n"),n("img",{attrs:{src:"https://i.imgur.com/kt3aPmW.png",alt:""}}),t._v("\n2.点击上放的按钮\n"),n("img",{attrs:{src:"https://i.imgur.com/wFZ9uxd.png",alt:""}}),t._v("\n点击写入，即可看到生在static（plugins里面配置的目录）里的shell.html了\n"),n("img",{attrs:{src:"https://i.imgur.com/q2eYEVP.png",alt:""}})])]),t._v(" "),n("p",[t._v("最后将项目打包，运行起来，就能看到对应的skeleton-page了\n"),n("img",{attrs:{src:"https://i.imgur.com/gDgaDn0.gif",alt:""}}),t._v("\n还有更多的参数配置，请参考仓库地址"),n("a",{attrs:{href:"https://github.com/ElemeFE/page-skeleton-webpack-plugin",title:"page-skeleton-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("page-skeleton-webpack-plugin"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("strong",[t._v("这里我还碰到了一个问题")]),t._v("\n就是运行插件式，系统提示windows找不到chrome\n"),n("img",{attrs:{src:"https://i.imgur.com/7K9fB9a.gif",alt:""}}),t._v(" "),n("img",{attrs:{src:"https://i.imgur.com/vPvSfWd.png",alt:""}}),t._v("\n再使用Puppeteer的demo排除了生成skeleton界面的问题后\n在inssue里跟大神交流后\n知道插件用到了一个叫"),n("a",{attrs:{href:"https://github.com/sindresorhus/opn",target:"_blank",rel:"noopener noreferrer"}},[t._v("opn"),n("OutboundLink")],1),t._v("的库来打开chrome\n这里提到了不同环境下的app名字是不一样的\n"),n("code",[t._v("app")]),t._v(" "),n("code",[t._v("Type: string Array")]),t._v(" "),n("code",[t._v("Specify the app to open the target with, or an array with the app and app arguments.")]),t._v(" "),n("code",[t._v("The app name is platform dependent. Don't hard code it in reusable modules. For example, Chrome is google chrome on macOS, google-chrome on Linux and chrome on Windows.")]),t._v("\n所以在不同的环境下启动，需要寻找对应的名字\n找到问题，大神给出了解决方案\n在node_modules/page-skeleton-webpack-plugin/src/server.js")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//修改前\nopen({this.previewPageUrl, app: google chrome})\n//修改后\nopen(this.previewPageUrl, {\n  app: ['chrome', '--incognito']\n})\n")])])]),n("p",[t._v("这样系统就能顺利的找到chrome，完成生成页面后的操作了！")]),t._v(" "),n("p",[t._v("但是这里我又有个问题了，如果用户通过不同的链接进入项目，那么每个地址都会显示这个固定的骨架屏，")]),t._v(" "),n("h4",{attrs:{id:"如何才能为不同的页面-配置不同的骨架屏呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何才能为不同的页面-配置不同的骨架屏呢"}},[t._v("#")]),t._v(" 如何才能为不同的页面，配置不同的骨架屏呢")]),t._v(" "),n("p",[t._v("这里我找到了另外一个库"),n("a",{attrs:{href:"https://github.com/lavas-project/vue-skeleton-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-skeleton-webpack-plugin"),n("OutboundLink")],1),t._v("，是需要手动编写skeleton-page，但是可以配置多页面对应多骨架屏")]),t._v(" "),n("ul",[n("li",[t._v("配置篇")])]),t._v(" "),n("p",[t._v("首先需要安装对应的插件")]),t._v(" "),n("blockquote",[n("p",[t._v("npm install vue-skeleton-webpack-plugin")])]),t._v(" "),n("p",[t._v("插件在dev可以配置预览的路由，在prod环境下使用")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("在webpack.prod.conf.js中引入插件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v(" // 引入插件\n const SkeletonWebpackPlugin = require('vue-skeleton-webpack-plugin')\n // plugin里添加配置\n plugins: [\n \tnew SkeletonWebpackPlugin({\n       webpackConfig: require('./webpack.skeleton.conf'), // skeleton配置文件\n       router: {\n         routes: [  // path是对应的路由，skeletonId是对应骨架屏的id（在后面的entry-skeleton.ts中可以看到）\n           {path: '/index', skeletonId: 'skeleton2'}, \n           {path: '/', skeletonId: 'skeleton1'}\n         ]\n       }\n     }),\n ]\n")])])])]),t._v(" "),n("li",[n("p",[t._v("同级目录下的webpack.skeleton.conf.js配置文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v(" 'use strict';\n\n const webpack = require('webpack');\n const config = require('../config');\n const path = require('path')\n const merge = require('webpack-merge')\n const baseWebpackConfig = require('./webpack.base.conf')\n const nodeExternals = require('webpack-node-externals')\n const OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\n \n function resolve(dir) {\n   return path.join(__dirname, dir)\n }\n \n module.exports = merge(baseWebpackConfig, {\n   target: 'node',\n   devtool: false,\n   entry: {\n     app: resolve('../src/entry-skeleton.ts') // skeleton入口文件\n   },\n   output: Object.assign({}, baseWebpackConfig.output, {\n       filename: 'skeleton-bundle.js',\n       libraryTarget: 'commonjs2'\n   }),\n   externals: nodeExternals({\n     whitelist: /\\.css$/\n   }),\n   plugins: [\n     new webpack.DefinePlugin({\n         'process.env': config.build.env\n     }),\n \n     // Compress extracted CSS. We are using this plugin so that possible\n     // duplicated CSS from different components can be deduped.\n     new OptimizeCSSPlugin({\n         cssProcessorOptions: {\n             safe: true\n         }\n     })\n   ]\n })\n")])])])]),t._v(" "),n("li",[n("p",[t._v("../src/entry-skeleton.ts入口文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v(' import Vue from \'vue\';\n import Skeleton1 from \'./skeleton/HomeSkeleton.vue\'; // 事先写好的skeleton-page页面\n import Skeleton2 from \'./skeleton/HomeSkeleton2.vue\';\n \n export default new Vue({\n     components: {\n         Skeleton1,  // 注册对应的组件\n         Skeleton2\n     },\n     template: `\n       <div>  // 这里对应的id就是plugins里面不同页面对应的skeletonId\n         <skeleton1 id="skeleton1" style="display:none" />\n         <skeleton2 id="skeleton2" style="display:none" />\n       </div>\n     `\n });\n')])])])])]),t._v(" "),n("p",[t._v("效果图\n/index 对应的 id skeleton2\n"),n("img",{attrs:{src:"https://i.imgur.com/VABboqs.gif",alt:""}}),t._v("\n/      对应的 id skeleton1\n"),n("img",{attrs:{src:"https://i.imgur.com/HSryVBj.gif",alt:""}}),t._v("\n更多的配置参考仓库地址 "),n("a",{attrs:{href:"https://github.com/lavas-project/vue-skeleton-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-skeleton-webpack-plugin"),n("OutboundLink")],1),t._v("\n这样，就能实现多页对应多个skeleton-page了\n再结合前面的自动生成skeleton-page是不是算半自动花了，- -笑哭\n有心之人可以结合两个插件，全自动多页对应多skeleton-page指日可待了！")])])}),[],!1,null,null,null);e.default=a.exports}}]);