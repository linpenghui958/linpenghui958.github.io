(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{396:function(t,a,s){"use strict";s.r(a);var n=s(45),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"如何获取flutter-app的fps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何获取flutter-app的fps"}},[t._v("#")]),t._v(" 如何获取Flutter APP的FPS")]),t._v(" "),s("p",[t._v("众所周知，我们需要衡量一个APP的性能数据，其中FPS也作为其中一个非常重要的标准。")]),t._v(" "),s("p",[t._v("这里我们了解一下如何获取Flutter应用中的FPS性能数据。")]),t._v(" "),s("h3",{attrs:{id:"fps是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fps是什么"}},[t._v("#")]),t._v(" FPS是什么")]),t._v(" "),s("p",[s("strong",[t._v("帧率")]),t._v("是用于测量显示帧数的"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%87%8F%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"}},[t._v("量度"),s("OutboundLink")],1),t._v("，可产生的图像的数量\n计量单位是帧/秒（Frame Per Second，FPS）\n通常是评估硬件性能与游戏体验流畅度的指标")]),t._v(" "),s("h3",{attrs:{id:"flutter的渲染过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flutter的渲染过程"}},[t._v("#")]),t._v(" Flutter的渲染过程")]),t._v(" "),s("p",[t._v("Flutter 关注如何尽可能快地在两个硬件时钟的 VSync 信号之间计算并合成视图数据，然后通过 Skia 交给 GPU 渲染：UI 线程使用 Dart 来构建视图结构数据，这些数据会在 GPU 线程进行图层合成，随后交给 Skia 引擎加工成 GPU 数据，而这些数据会通过 OpenGL 最终提供给 GPU 渲染")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://km.oa.com/files/photos/pictures/202008/1597306977_34_w1870_h450.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"本地调试获取fps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地调试获取fps"}},[t._v("#")]),t._v(" 本地调试获取FPS")]),t._v(" "),s("p",[t._v("官方提供了许多在开发Flutter APP的过程中查看FPS等性能的工具。")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://github.com/flutter/devtools",target:"_blank",rel:"noopener noreferrer"}},[t._v("devtool"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("DevTool 的 [Timeline] 界面可以让开发者逐帧分析应用的 UI 性能，具体的使用方式可以看一下"),s("a",{attrs:{href:"https://flutter.dev/docs/perf/rendering/ui-performance",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("性能图层")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://flutter.cn/assets/tools/devtools/performance-overlay-green-bb41b466cf6bcd529b285e1510b638086fc5afb8921b8ac5a6565dee5bc44788.png",alt:"Screenshot of overlay showing zero jank"}})]),t._v(" "),s("p",[t._v("在这些工具中我们只能在本地开发过程中获取FPS数据，如果要统计线上用户的真实数据，要在Flutter代码中计算FPS又该如何做呢？")]),t._v(" "),s("h3",{attrs:{id:"生成环境获取fps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成环境获取fps"}},[t._v("#")]),t._v(" 生成环境获取FPS")]),t._v(" "),s("h4",{attrs:{id:"flutter相关性能指标定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flutter相关性能指标定义"}},[t._v("#")]),t._v(" Flutter相关性能指标定义")]),t._v(" "),s("p",[t._v("在阅读官方文档的时候，有一个"),s("a",{attrs:{href:"https://api.flutter.dev/flutter/dart-ui/FrameTiming-class.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("FrameTiming"),s("OutboundLink")],1),t._v("类描述了每一帧的时间相关的性能指标。")]),t._v(" "),s("blockquote",[s("p",[t._v("If you're using the whole Flutter framework, please use "),s("a",{attrs:{href:"https://api.flutter.dev/flutter/scheduler/SchedulerBinding/addTimingsCallback.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SchedulerBinding.addTimingsCallback"),s("OutboundLink")],1),t._v(" to get this. It's preferred over using "),s("a",{attrs:{href:"https://api.flutter.dev/flutter/dart-ui/Window/onReportTimings.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Window.onReportTimings"),s("OutboundLink")],1),t._v(" directly because "),s("a",{attrs:{href:"https://api.flutter.dev/flutter/scheduler/SchedulerBinding/addTimingsCallback.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SchedulerBinding.addTimingsCallback"),s("OutboundLink")],1),t._v(" allows multiple callbacks. If "),s("a",{attrs:{href:"https://api.flutter.dev/flutter/scheduler/SchedulerBinding-mixin.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SchedulerBinding"),s("OutboundLink")],1),t._v(" is unavailable, then see "),s("a",{attrs:{href:"https://api.flutter.dev/flutter/dart-ui/Window/onReportTimings.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Window.onReportTimings"),s("OutboundLink")],1),t._v(" for how to get this.")])]),t._v(" "),s("p",[t._v("这里更推荐使用SchedulerBinding.addTimingsCallBack来获取FPS相关数据。该回调允许多个回调方法，如果该方法不可用才考虑使用Window.onReportTimings。")]),t._v(" "),s("h4",{attrs:{id:"性能数据获取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能数据获取"}},[t._v("#")]),t._v(" 性能数据获取")]),t._v(" "),s("p",[t._v("这里看一下文档中"),s("a",{attrs:{href:"https://api.flutter.dev/flutter/scheduler/SchedulerBinding/addTimingsCallback.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("addTimingsCallback"),s("OutboundLink")],1),t._v("的定义。")]),t._v(" "),s("blockquote",[s("p",[t._v("Add a "),s("a",{attrs:{href:"https://api.flutter.dev/flutter/dart-ui/TimingsCallback.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TimingsCallback"),s("OutboundLink")],1),t._v(" that receives "),s("a",{attrs:{href:"https://api.flutter.dev/flutter/dart-ui/FrameTiming-class.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("FrameTiming"),s("OutboundLink")],1),t._v(" sent from the engine.")])]),t._v(" "),s("p",[t._v("添加一个TimingsCallback从engine接受发送的FrameTiming信息。接下来看一下具体代码中的定义，了解一下如何使用该方法。")]),t._v(" "),s("p",[s("code",[t._v("flutter/src/scheduler/binding.dart")])]),t._v(" "),s("div",{staticClass:"language-dart extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dart"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTimingsCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TimingsCallback callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _timingsCallbacks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_timingsCallbacks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onReportTimings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onReportTimings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _executeTimingsCallbacks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onReportTimings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" _executeTimingsCallbacks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这里就是对window.onReportTimings的处理进行了封装了。首先用一个叫_timingsCallbacks的List保存了添加的回调，然后初始化时给window.onReportTimings赋值_executeTimingsCallbacks方法。这里_executeTimingsCallbacks会对前面保存的回调List进行遍历执行。")]),t._v(" "),s("p",[t._v("知道了addTimingsCallback做了什么，我们再看一下这里callback的定义。")]),t._v(" "),s("p",[s("code",[t._v("sky_engine/ui/window.dart")])]),t._v(" "),s("div",{staticClass:"language-dart extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dart"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// {@template dart.ui.TimingsCallback.list}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// The callback takes a list of [FrameTiming] because it may not be")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// immediately triggered after each frame. Instead, Flutter tries to batch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// frames together and send all their timings at once to decrease the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// overhead (as this is available in the release mode). The list is sorted in")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// ascending order of time (earliest frame first). The timing of any frame")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// will be sent within about 1 second (100ms if in the profile/debug mode)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// even if there are no later frames to batch. The timing of the first frame")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// will be sent immediately without batching.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// {@endtemplate}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" TimingsCallback "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FrameTiming"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" timings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上方的注释写到，这个回调接受一个FrameTiming的List，Flutter会尝试将这些帧合并后一次性发送，以减少开销。正常情况下一秒内会发送完所有帧，如果在profile/debug模式下，时间会缩短到100毫秒内。")]),t._v(" "),s("p",[t._v("简而言之，callback将会得到一个"),s("strong",[t._v("FrameTiming的List")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"具体信息分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体信息分析"}},[t._v("#")]),t._v(" 具体信息分析")]),t._v(" "),s("p",[t._v("这里知道在回调中可以拿到的是FrameTiming了，接下来看一下，如果通过这个帧信息可以获取到那些信息呢。")]),t._v(" "),s("p",[s("code",[t._v("sky_engine/ui/window.dart")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class FrameTiming {\n  /// 使用以微秒为单位的原始时间戳来构造[FrameTiming]\n  ///\n  /// 这个构建函数仅在单元测试中使用，如果需要获取真实的[FrameTiming]数据请通过[Window.onReportTimings]中获取\n  factory FrameTiming({\n    required int vsyncStart,\n    required int buildStart,\n    required int buildFinish,\n    required int rasterStart,\n    required int rasterFinish,\n  }) {\n    return FrameTiming._(<int>[\n      vsyncStart,\n      buildStart,\n      buildFinish,\n      rasterStart,\n      rasterFinish\n    ]);\n  }\n\n  /// Construct [FrameTiming] with raw timestamps in microseconds.\n  ///\n  /// [timestamps]List必须要有一个同样长度的[FramePhase.values]List\n\n  FrameTiming._(List<int> timestamps)\n      : assert(timestamps.length == FramePhase.values.length), _timestamps = timestamps;\n\n  int timestampInMicroseconds(FramePhase phase) => _timestamps[phase.index];\n\n  Duration _rawDuration(FramePhase phase) => Duration(microseconds: _timestamps[phase.index]);\n\n  /// 在UI线程上构建帧持续的时间。\n  ///\n  /// 构建开始的时机大概是当[Window.onBeginFrame]被调用时。[Window.onBeginFrame]回调中的[Duration]就是`Duration(microseconds: timestampInMicroseconds(FramePhase.buildStart))`\n  ///\n  /// 构建结束的时机大概是当[Window.render]被调用时。\n  ///\n  /// {@template dart.ui.FrameTiming.fps_smoothness_milliseconds}\n  /// 为了确保x fps平滑动画，这里的时间不应该超过1000/x毫秒。 （x即为fps值，例60， 120）\n  /// {@endtemplate}\n  /// {@template dart.ui.FrameTiming.fps_milliseconds}\n  /// 60fps约为16ms，120fps约为8ms;\n  /// {@endtemplate}\n  Duration get buildDuration => _rawDuration(FramePhase.buildFinish) - _rawDuration(FramePhase.buildStart);\n\n  /// 在GPU线程上光栅化帧的持续时间。\n  ///\n  /// {@macro dart.ui.FrameTiming.fps_smoothness_milliseconds}\n  /// {@macro dart.ui.FrameTiming.fps_milliseconds}\n  Duration get rasterDuration => _rawDuration(FramePhase.rasterFinish) - _rawDuration(FramePhase.rasterStart);\n\n  /// 在接收到vsync信号并开始构建该帧所花费的时间。\n  Duration get vsyncOverhead => _rawDuration(FramePhase.buildStart) - _rawDuration(FramePhase.vsyncStart);\n\n  /// 构建开始到栅格化结束的时间。\n  ///\n  /// 继续强调这里的时间不应该超过1000/x毫秒。\n  /// {@macro dart.ui.FrameTiming.fps_milliseconds}\n  ///\n  /// See also [vsyncOverhead], [buildDuration] and [rasterDuration].\n  Duration get totalSpan => _rawDuration(FramePhase.rasterFinish) - _rawDuration(FramePhase.vsyncStart);\n\n  final List<int> _timestamps;  // in microseconds\n\n  String _formatMS(Duration duration) => '${duration.inMicroseconds * 0.001}ms';\n\n  @override\n  String toString() {\n    return '$runtimeType(buildDuration: ${_formatMS(buildDuration)}, rasterDuration: ${_formatMS(rasterDuration)}, vsyncOverhead: ${_formatMS(vsyncOverhead)}, totalSpan: ${_formatMS(totalSpan)})';\n  }\n}\n")])])]),s("p",[t._v("这里"),s("code",[t._v("FrameTiming")]),t._v("获取帧相关的时间，其实都是通过"),s("code",[t._v("FramePhase")]),t._v("上的属性来计算的。看一下该类的具体定义。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/// 帧的生命周期中各个重要的时间点。\n/// [FrameTiming]记录了用于性能分析的每个阶段的时间戳。\nenum FramePhase {\n  /// 当接收到操作系统vsync信号的时间戳\n  /// See also [FrameTiming.vsyncOverhead].\n  vsyncStart,\n\n  /// 当UI线程开始绘制一个帧。\n  /// See also [FrameTiming.buildDuration].\n  buildStart,\n\n  /// 当UI线程结束帧的绘制。\n  /// See also [FrameTiming.buildDuration].\n  buildFinish,\n\n  /// 当GPU线程开始栅格化帧时。\n  /// See also [FrameTiming.rasterDuration].\n  rasterStart,\n\n  /// 当GPU线程完成栅格化帧时。\n  /// See also [FrameTiming.rasterDuration].\n  rasterFinish,\n}\n")])])]),s("p",[t._v("现在知道了如果获取最近"),s("code",[t._v("N个FrameTiming")]),t._v("和每个FrameTiming中所含有的时间戳信息，接下来看一下如果进行实际的FPS计算了。")]),t._v(" "),s("h4",{attrs:{id:"计算fps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算fps"}},[t._v("#")]),t._v(" 计算FPS")]),t._v(" "),s("p",[t._v("理所当然的去想，我们可以获取"),s("code",[t._v("总帧数")]),t._v("(FrameTiming List的长度)，总共的"),s("code",[t._v("耗时")]),t._v("(尾帧时间减去首帧时间)。是不是轻而易举就能算出FPS了呢。")]),t._v(" "),s("div",{staticClass:"language-dart extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dart"}},[s("code",[t._v("double "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" fps "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  int frames "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lastFrames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lastFrames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("last"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timestampInMicroseconds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FramePhase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buildStart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lastFrames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timestampInMicroseconds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FramePhase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rasterFinish"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" duration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" Duration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("microsecondsPerMillisecond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" frames "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Duration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("millisecondsPerSecond "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" duration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这样算出来的结果完全对不上，这是为什么呢。")]),t._v(" "),s("p",[t._v("其实，"),s("code",[t._v("window.onReportTimings")]),t._v(" 只会在有帧被绘制时才有数据回调，换句话说，你没有和app发生交互、界面状态没有变化（setState）、没有定时刷布局（动画）等等没有新的帧产生，所以"),s("code",[t._v("lastFrames")]),t._v("里存的可能是分属不同“绘制时间段”的帧信息。")]),t._v(" "),s("p",[s("strong",[t._v("假设")]),t._v("一秒最多绘制 60 帧，每帧消耗的时间 "),s("code",[t._v("frameInterval")]),t._v(" 为：")]),t._v(" "),s("div",{staticClass:"language-dart extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dart"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" REFRESH_RATE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" frameInterval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Duration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("microseconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Duration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("microsecondsPerSecond "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~/")]),t._v(" REFRESH_RATE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Flutter引擎每次在收到vsync信号的时候会去调用drawFrame方法，这里如果一帧所花费的时间超过"),s("code",[t._v("frameInterval")]),t._v("，则可能会出现丢帧的情况。")]),t._v(" "),s("p",[t._v("并且如果"),s("code",[t._v("lastFrames")]),t._v("里面相邻的两个帧开始、结束时间相差过大")]),t._v(" "),s("div",{staticClass:"language-dart extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dart"}},[s("code",[t._v("List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FrameTiming"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" framesSet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FrameTiming"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每帧耗时 先写死16.6ms")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" double frameInterval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16600")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSchedulerBinding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTimingsCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FrameTiming"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" timings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      timings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("framesSet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当时间间隔大于1s，则计算一次FPS")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldReport")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        startTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("framesSet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        framesSet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FrameTiming"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ndouble "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FrameTiming"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" timings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    int sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" FrameTiming timing "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" timings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算渲染耗时")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" int duration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" timing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timestampInMicroseconds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FramePhase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rasterFinish"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n          timing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timestampInMicroseconds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FramePhase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buildStart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断耗时是否在 Vsync 信号周期内")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("duration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" frameInterval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有丢帧，向上取整")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" int count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("duration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" frameInterval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" double fps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" timings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);